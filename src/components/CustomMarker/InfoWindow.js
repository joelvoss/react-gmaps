import React from 'react';
import styled from 'styled-components';

import LazyLoadImage from 'components/LazyLoadImage';

/**
 * The Wrapper component.
 * It positions itself on top if its parent marker and is just
 * a shell for the styled components.
 */
const Wrapper = styled.div`
  position: absolute;
  width: ${props => `${props.w}px`};
  height: ${props => `${props.h}px`};
  bottom: 20px;
  left: ${props => `-${props.w / 2 - 10}px`};
  pointer-events: auto;
`;

/**
 * The actual content div of the infowindow.
 * It is exactly the size of the wrapper component.
 */
const Content = styled.div`
  position: relative;
  width: 100%;
  height: 100%;
  cursor: initial;
  border-radius: 6px;
  background: ${props => props.theme.lightGrey};

  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
`;

/**
 * An rounded image component inside the content component.
 * This component lazyloads its image source.
 */
const Image = styled(LazyLoadImage)`
  position: absolute;
  top: ${props => `-${props.w / 3}px`};
  left: 10px;
  width: ${props => `${props.w - 28}px`};
  height: ${props => `${props.w - 28}px`};
  border: 4px solid ${props => props.theme.white};
  border-radius: 50%;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
`;

const Block = styled.div`
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;

  font-size: 0.85rem;
`;

const Headline = styled.h1`
  width: calc(100% - 1em);
  font-size: 1em;
  padding: 0 0.5em;
  margin: 0;

  text-align: center;
  color: ${props => props.theme.primary};

  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;

const Open = styled.span`
  display: block;
  width: calc(100% - 1em);
  font-size: 1em;
  padding: 0 0.5em;
  margin: 0.1em 0 0.5em 0;

  text-align: center;
  color: MediumSeaGreen;
`;

const Closed = Open.extend`color: tomato;`;

const TextBlock = props => {
  const { name, openingHours } = props;
  return (
    <Block>
      <Headline>{name}</Headline>
      {openingHours && openingHours.open_now
        ? <Open>Jetzt ge√∂ffnet</Open>
        : <Closed>Geschlossen</Closed>}
    </Block>
  );
};

/**
 * A wrapper component for the triangle.
 * It centers its children horizontally.
 */
const TriangleWrap = styled.div`
  position: relative;
  display: flex;
  flex-direction: row;
  justify-content: center;
  width: 100%;
`;
/**
 * The actual triangle.
 * The triangle is generated by a css3 border-style "trick/hack".
 */
const TDown = styled.div`
  width: 0;
  height: 0;
  border-style: solid;
  border-width: ${props => `${props.h}px ${props.w / 2}px 0 ${props.w / 2}px`};
  border-color: ${props => `${props.theme.lightGrey} transparent transparent transparent`};
`;

/**
 * We compose the triangle wrapper and child elements to one triangle component.
 * @param {object} props - Options of the triangle.
 */
const Triangle = props => {
  return (
    <TriangleWrap>
      <TDown w={25} h={10} />
    </TriangleWrap>
  );
};

/**
 * The composed InfoWindow component.
 * This component will be exported and used inside a single marker component.
 * @param {object} props - The InfoWindow options.
 */
const InfoWindow = props => {
  const { data, w, h, handleClose } = props;

  return (
    <Wrapper w={w} h={h}>
      {/* Content */}
      <Content>
        <Image
          w={w}
          h={h}
          placeholder={data.image.thumbnail}
          src={data.image.medium || data.image.thumbnail}
        />
        <TextBlock name={data.name} openingHours={data.opening_hours} />
      </Content>
      <Triangle />
    </Wrapper>
  );
};

export default InfoWindow;
